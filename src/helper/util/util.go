package util

import (
	"crypto/rsa"
	"io/ioutil"
	"log"
	"time"

	"github.com/dgrijalva/jwt-go"
)

// ISOFormat is a date format that generated by Javascript engine, which means it includes the millisecond,
// it is a little bit different to "RFC3339" format that ignore the millisecond.
const ISOFormat = "2006-01-02T15:04:05.000Z07:00"

// ToISODate returns date with ISO string format based on location time zone.
// But returns error if location time zone is not a standard.
//
// Example of return:
//
// When the location is "UTC", it will return "2006-01-02T08:04:05.000Z", but if the location is "Asia/Jakarta",
// it will return "2006-01-02T15:04:05.000+07:00".
func ToISODate(t time.Time, loc string) (string, error) {
	location, err := time.LoadLocation(loc)
	if err != nil {
		return "", err
	}
	isoString := t.In(location).Format(ISOFormat)
	return isoString, nil
}

// GetRSAPublicKey returns RSA key of verification
func GetRSAPublicKey(fileName string) *rsa.PublicKey {
	verifyBytes, _ := ioutil.ReadFile(fileName)
	verifyKey, err := jwt.ParseRSAPublicKeyFromPEM(verifyBytes)
	if err != nil {
		log.Println(err)
		return nil
	}
	return verifyKey
}

// GetRSAPrivateKey returns RSA sign key
func GetRSAPrivateKey(fileName string) *rsa.PrivateKey {
	signBytes, _ := ioutil.ReadFile(fileName)
	signKey, err := jwt.ParseRSAPrivateKeyFromPEM(signBytes)
	if err != nil {
		log.Println(err)
		return nil
	}
	return signKey
}
